diff -ur azurecoast_orig/service_source/service/go/src/rwthctfvm/cpu/cpu.go azurecoast/service_source/service/go/src/rwthctfvm/cpu/cpu.go
--- azurecoast_orig/service_source/service/go/src/rwthctfvm/cpu/cpu.go	2012-12-14 00:24:07.277183829 +0400
+++ azurecoast/service_source/service/go/src/rwthctfvm/cpu/cpu.go	2012-12-01 00:47:51.611877564 +0400
@@ -159,12 +159,13 @@
 	if c.Step { getKey() }
 	ipval,err := c.GetRegister(ip)
 	//fmt.Println("fetching "+hex(ipval))
+	fmt.Print(hex(ipval) + ": ")
 	if err != nil {return errors.New("unable to get ip") }
 	instrval, err := c.GetMemory(ipval)
 	if err != nil {return errors.New("unable to get cmd") }
 	instr, err := c.GetInstr(instrval)
 	if err != nil {return errors.New("unable to decode instr") }
-	//fmt.Println(instr.Inspect())
+	fmt.Println(instr.Inspect())
 	if c.Step {
 		fmt.Print("IP: "+c.InspectIP())
 		fmt.Println(instr.Inspect())
@@ -287,9 +288,9 @@
 				i := int(bytes[0])
 
 				if i!=0x0a { //don't print newlines
-				//c.Log("readb from",arg1,"read", hex(int(i)), string(i), "ok:", num)
+				c.Log("readb from",arg1,"read", hex(int(i)), string(i), "ok:", num)
 				} else {
-				//c.Log("readb from",arg1,"read", hex(int(i)), "ok:", num)
+				c.Log("readb from",arg1,"read", hex(int(i)), "ok:", num)
 				}
 				c.SetRegister(t1,num)
 				c.SetRegister(t0,i)
@@ -310,19 +311,19 @@
 					num = 0
 				}
 				if i!=0x0a { //don't print newlines
-				//c.Log("read from",arg1,"read", hex(int(i)), string(i), "ok:", num)
+				c.Log("read from",arg1,"read", hex(int(i)), string(i), "ok:", num)
 				} else {
-				//c.Log("read from",arg1,"read", hex(int(i)), "ok:", num)
+				c.Log("read from",arg1,"read", hex(int(i)), "ok:", num)
 				}
 
-				//fmt.Println("read num:",num)
+				fmt.Println("read num:",num,", v=",hex(int(i)))
 				c.SetRegister(t1,num)
 				c.SetRegister(t0,int(i))
 			}else {
 				return errors.New( "invalid file handle "+ hex(arg1))
 			}
 		case WRITEW :
-			//fmt.Println("writingw: ",arg2)
+			fmt.Println("writingw: ",arg2)
 			if file,ok := c.FileHandles[arg1]; ok {
 				buff := new(bytes.Buffer)
 
diff -ur azurecoast_orig/service_source/service/go/src/rwthctfvm/cpu/instr.go azurecoast/service_source/service/go/src/rwthctfvm/cpu/instr.go
--- azurecoast_orig/service_source/service/go/src/rwthctfvm/cpu/instr.go	2012-12-14 00:24:07.281183819 +0400
+++ azurecoast/service_source/service/go/src/rwthctfvm/cpu/instr.go	2012-11-30 22:59:35.933241494 +0400
@@ -152,13 +152,13 @@
 }
 
 var arith = map[Opcode](func(int, int) int){
-	add:  func(l, r int) int { return l + r },
-	sub: func(l, r int) int { return l - r },
-	mul:  func(l, r int) int { return l * r },
+	add:  func(l, r int) int {  fmt.Println("[.] R="+hex(l+r)+"\n"); return l + r },
+	sub: func(l, r int) int {   fmt.Println("[.] R="+hex(l-r)+"\n"); return l - r },
+	mul:  func(l, r int) int  { fmt.Println("[.] R="+hex(l*r)+"\n"); return l * r },
 	div:   func(l, r int) int { if r != 0 {return l / r}; return 0 },
 	mod:   func(l, r int) int { if r != 0 {return l % r}; return 0},
 	rol:   func(l, r int) int { return int(urol(uint32(l),uint32(r)))},
-	xor:   func(l, r int) int { return l ^ r },
+	xor:   func(l, r int) int { fmt.Println("[.] R="+hex(l^r)+"\n"); return l ^ r },
 	and:   func(l, r int) int { return l & r },
 	or:    func(l, r int) int { return l | r },
 	not:   func(l, r int) int { return ^r },
